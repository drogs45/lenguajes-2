
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Feb 16 22:24:34 VET 2010
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Feb 16 22:24:34 VET 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\003\004\000\002\002\004\000\002\004" +
    "\007\000\002\033\015\000\002\033\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\042\006\000\002\007" +
    "\005\000\002\007\003\000\002\040\004\000\002\040\005" +
    "\000\002\010\005\000\002\010\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\015\005\000\002\015\003" +
    "\000\002\014\003\000\002\014\003\000\002\016\010\000" +
    "\002\016\005\000\002\016\005\000\002\013\004\000\002" +
    "\022\004\000\002\032\010\000\002\032\006\000\002\032" +
    "\006\000\002\021\004\000\002\021\006\000\002\021\004" +
    "\000\002\023\011\000\002\024\007\000\002\024\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\025\004\000\002\030\012\000\002\026\006\000\002\026" +
    "\004\000\002\027\006\000\002\027\004\000\002\031\010" +
    "\000\002\036\005\000\002\036\004\000\002\037\003\000" +
    "\002\037\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\003\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\003\000\002\034\003\000\002\035\004\000\002" +
    "\035\005\000\002\035\005\000\002\035\004\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\041\005\000\002" +
    "\041\003\000\002\041\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\054\ufffd\001\002\000\004\054\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\024\014\012\033\015\034\017\035\024\036\011\037" +
    "\023\070\020\076\014\077\013\001\002\000\004\002\001" +
    "\001\002\000\004\070\ufff6\001\002\000\004\026\303\001" +
    "\002\000\004\070\ufff9\001\002\000\004\026\300\001\002" +
    "\000\004\070\ufffb\001\002\000\004\070\ufff4\001\002\000" +
    "\004\070\ufff8\001\002\000\004\070\ufffa\001\002\000\004" +
    "\070\025\001\002\000\004\070\ufffc\001\002\000\004\070" +
    "\ufff5\001\002\000\004\070\ufff7\001\002\000\004\012\026" +
    "\001\002\000\020\034\017\035\024\036\011\037\023\066" +
    "\031\076\014\077\013\001\002\000\006\013\037\057\036" +
    "\001\002\000\006\013\ufff1\057\ufff1\001\002\000\016\034" +
    "\017\035\024\036\011\037\023\076\014\077\013\001\002" +
    "\000\004\070\033\001\002\000\006\013\ufff0\057\ufff0\001" +
    "\002\000\004\070\035\001\002\000\006\013\uffef\057\uffef" +
    "\001\002\000\020\034\017\035\024\036\011\037\023\066" +
    "\031\076\014\077\013\001\002\000\004\026\040\001\002" +
    "\000\034\016\050\021\046\024\056\032\044\034\017\035" +
    "\024\036\011\037\023\070\051\074\043\075\061\076\014" +
    "\077\013\001\002\000\004\070\271\001\002\000\036\016" +
    "\050\021\046\024\056\027\266\032\044\034\017\035\024" +
    "\036\011\037\023\070\051\074\043\075\061\076\014\077" +
    "\013\001\002\000\022\005\071\012\222\051\103\052\074" +
    "\053\076\070\077\072\073\073\075\001\002\000\012\017" +
    "\uffe6\020\uffe6\056\uffe6\070\264\001\002\000\010\017\uffea" +
    "\020\uffea\056\uffea\001\002\000\004\012\246\001\002\000" +
    "\010\017\uffe5\020\uffe5\056\uffe5\001\002\000\022\005\071" +
    "\012\222\051\103\052\074\053\076\070\077\072\073\073" +
    "\075\001\002\000\016\015\207\030\210\061\151\062\147" +
    "\063\150\064\152\001\002\000\010\017\uffe8\020\uffe8\056" +
    "\uffe8\001\002\000\010\017\uffeb\020\uffeb\056\uffeb\001\002" +
    "\000\010\017\uffec\020\uffec\056\uffec\001\002\000\004\056" +
    "\206\001\002\000\004\012\201\001\002\000\040\016\050" +
    "\021\046\024\056\026\175\032\044\034\017\035\024\036" +
    "\011\037\023\055\166\070\051\074\043\075\061\076\014" +
    "\077\013\001\002\000\040\016\050\021\046\024\056\026" +
    "\163\032\044\034\017\035\024\036\011\037\023\055\166" +
    "\070\051\074\043\075\061\076\014\077\013\001\002\000" +
    "\004\012\066\001\002\000\010\017\uffcf\020\uffcf\056\uffcf" +
    "\001\002\000\010\017\uffd0\020\uffd0\056\uffd0\001\002\000" +
    "\010\017\uffd1\020\uffd1\056\uffd1\001\002\000\010\017\uffe9" +
    "\020\uffe9\056\uffe9\001\002\000\016\034\017\035\024\036" +
    "\011\037\023\076\014\077\013\001\002\000\004\057\070" +
    "\001\002\000\020\005\071\051\103\052\074\053\076\070" +
    "\077\072\073\073\075\001\002\000\012\005\071\070\077" +
    "\072\073\073\075\001\002\000\062\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\013\uffa9\017\uffa9\020\uffa9\025\uffa9" +
    "\026\uffa9\031\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\065\160\001\002\000\060\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\013\uffab\017\uffab\020\uffab\025\uffab" +
    "\026\uffab\031\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\056\uffab\057\uffab" +
    "\060\uffab\001\002\000\020\013\uffb7\026\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\057\uffb7\001\002\000\060\004\uffaa" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\013\uffaa\017\uffaa\020" +
    "\uffaa\025\uffaa\026\uffaa\031\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\001\002\000\020\013\uffb6\026\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\057\uffb6\001\002\000" +
    "\064\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\013\uffa7" +
    "\017\uffa7\020\uffa7\025\uffa7\026\uffa7\030\155\031\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\056\uffa7\057\uffa7\060\uffa7\065\uffa7\001" +
    "\002\000\014\045\107\046\106\047\110\050\105\057\143" +
    "\001\002\000\030\004\122\005\115\006\126\007\117\010" +
    "\121\025\125\040\120\041\116\042\124\043\123\044\127" +
    "\001\002\000\020\013\uffbe\026\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\057\uffbe\001\002\000\020\005\071\051\103" +
    "\052\074\053\076\070\077\072\073\073\075\001\002\000" +
    "\020\013\uffbf\026\uffbf\045\107\046\106\047\110\050\105" +
    "\057\uffbf\001\002\000\016\005\071\052\074\053\076\070" +
    "\077\072\073\073\075\001\002\000\016\005\071\052\074" +
    "\053\076\070\077\072\073\073\075\001\002\000\016\005" +
    "\071\052\074\053\076\070\077\072\073\073\075\001\002" +
    "\000\016\005\071\052\074\053\076\070\077\072\073\073" +
    "\075\001\002\000\020\013\uffc0\026\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\057\uffc0\001\002\000\020\013\uffc3\026" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\057\uffc3\001\002" +
    "\000\020\013\uffc1\026\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\057\uffc1\001\002\000\020\013\uffc2\026\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\057\uffc2\001\002\000\012\005" +
    "\071\070\077\072\073\073\075\001\002\000\012\005\071" +
    "\070\077\072\073\073\075\001\002\000\012\005\071\070" +
    "\077\072\073\073\075\001\002\000\012\005\071\070\077" +
    "\072\073\073\075\001\002\000\012\005\071\070\077\072" +
    "\073\073\075\001\002\000\012\005\071\070\077\072\073" +
    "\073\075\001\002\000\012\005\071\070\077\072\073\073" +
    "\075\001\002\000\012\005\071\070\077\072\073\073\075" +
    "\001\002\000\012\005\071\070\077\072\073\073\075\001" +
    "\002\000\012\005\071\070\077\072\073\073\075\001\002" +
    "\000\012\005\071\070\077\072\073\073\075\001\002\000" +
    "\032\004\122\005\115\006\126\007\117\010\121\013\uffba" +
    "\026\uffba\045\uffba\046\uffba\047\uffba\050\uffba\057\uffba\001" +
    "\002\000\060\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\013\uffaf\017\uffaf\020\uffaf\025\uffaf\026\uffaf\031\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\056\uffaf\057\uffaf\060\uffaf\001\002\000" +
    "\032\004\122\005\115\006\126\007\117\010\121\013\uffbb" +
    "\026\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\057\uffbb\001" +
    "\002\000\032\004\122\005\115\006\126\007\117\010\121" +
    "\013\uffbd\026\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\057" +
    "\uffbd\001\002\000\032\004\122\005\115\006\126\007\117" +
    "\010\121\013\uffb9\026\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\057\uffb9\001\002\000\060\004\uffb1\005\uffb1\006\126" +
    "\007\117\010\121\013\uffb1\017\uffb1\020\uffb1\025\uffb1\026" +
    "\uffb1\031\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\001\002\000\060\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\013\uffad\017\uffad\020\uffad\025\uffad\026\uffad\031" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\056\uffad\057\uffad\060\uffad\001" +
    "\002\000\032\004\122\005\115\006\126\007\117\010\121" +
    "\013\uffbc\026\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\057" +
    "\uffbc\001\002\000\060\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\013\uffae\017\uffae\020\uffae\025\uffae\026\uffae\031" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\056\uffae\057\uffae\060\uffae\001" +
    "\002\000\032\004\122\005\115\006\126\007\117\010\121" +
    "\013\uffb8\026\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\057" +
    "\uffb8\001\002\000\060\004\uffb0\005\uffb0\006\126\007\117" +
    "\010\121\013\uffb0\017\uffb0\020\uffb0\025\uffb0\026\uffb0\031" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\056\uffb0\057\uffb0\060\uffb0\001" +
    "\002\000\004\070\144\001\002\000\012\061\151\062\147" +
    "\063\150\064\152\001\002\000\004\013\146\001\002\000" +
    "\040\016\uffcd\021\uffcd\024\uffcd\026\uffcd\032\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\055\uffcd\070\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\001\002\000\012\005\071\070\077" +
    "\072\073\073\075\001\002\000\012\013\uffb2\017\uffb2\020" +
    "\uffb2\056\uffb2\001\002\000\012\013\uffb5\017\uffb5\020\uffb5" +
    "\056\uffb5\001\002\000\012\005\071\070\077\072\073\073" +
    "\075\001\002\000\024\004\122\005\115\006\126\007\117" +
    "\010\121\013\uffb3\017\uffb3\020\uffb3\056\uffb3\001\002\000" +
    "\024\004\122\005\115\006\126\007\117\010\121\013\uffb4" +
    "\017\uffb4\020\uffb4\056\uffb4\001\002\000\012\005\071\070" +
    "\077\072\073\073\075\001\002\000\016\004\122\005\115" +
    "\006\126\007\117\010\121\031\157\001\002\000\062\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\013\uffa6\017\uffa6" +
    "\020\uffa6\025\uffa6\026\uffa6\031\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\065\uffa6\001\002\000\004\070" +
    "\161\001\002\000\062\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\013\uffa8\017\uffa8\020\uffa8\025\uffa8\026\uffa8\031" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\056\uffa8\057\uffa8\060\uffa8\065" +
    "\uffa8\001\002\000\060\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\013\uffac\017\uffac\020\uffac\025\uffac\026\uffac\031" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\056\uffac\057\uffac\060\uffac\001" +
    "\002\000\036\016\050\021\046\024\056\032\044\034\017" +
    "\035\024\036\011\037\023\055\166\070\051\074\043\075" +
    "\061\076\014\077\013\001\002\000\010\017\uffc5\020\uffc5" +
    "\056\uffc5\001\002\000\010\017\uffcb\020\uffcb\056\uffcb\001" +
    "\002\000\010\017\uffc4\020\uffc4\056\uffc4\001\002\000\040" +
    "\016\050\021\046\024\056\027\173\032\044\034\017\035" +
    "\024\036\011\037\023\055\166\070\051\074\043\075\061" +
    "\076\014\077\013\001\002\000\004\056\171\001\002\000" +
    "\040\016\uffc6\021\uffc6\024\uffc6\027\uffc6\032\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\055\uffc6\070\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\001\002\000\004\056\174\001\002" +
    "\000\010\017\uffcc\020\uffcc\056\uffcc\001\002\000\040\016" +
    "\uffc7\021\uffc7\024\uffc7\027\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\055\uffc7\070\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\001\002\000\036\016\050\021\046\024\056" +
    "\032\044\034\017\035\024\036\011\037\023\055\166\070" +
    "\051\074\043\075\061\076\014\077\013\001\002\000\010" +
    "\017\uffc9\020\uffc9\056\uffc9\001\002\000\040\016\050\021" +
    "\046\024\056\027\200\032\044\034\017\035\024\036\011" +
    "\037\023\055\166\070\051\074\043\075\061\076\014\077" +
    "\013\001\002\000\010\017\uffca\020\uffca\056\uffca\001\002" +
    "\000\004\070\202\001\002\000\004\067\203\001\002\000" +
    "\004\070\204\001\002\000\004\013\205\001\002\000\040" +
    "\016\uffc8\021\uffc8\024\uffc8\026\uffc8\032\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\055\uffc8\070\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\001\002\000\040\016\uffed\021\uffed\022" +
    "\uffed\024\uffed\027\uffed\032\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\070\uffed\074\uffed\075\uffed\076\uffed\077\uffed\001" +
    "\002\000\014\005\071\070\077\071\215\072\073\073\075" +
    "\001\002\000\004\072\211\001\002\000\004\031\212\001" +
    "\002\000\004\015\213\001\002\000\012\005\071\070\077" +
    "\072\073\073\075\001\002\000\024\004\122\005\115\006" +
    "\126\007\117\010\121\017\uffdf\020\uffdf\056\uffdf\057\uffdf" +
    "\001\002\000\012\017\uffde\020\uffde\056\uffde\057\uffde\001" +
    "\002\000\024\004\122\005\115\006\126\007\117\010\121" +
    "\017\uffdd\020\uffdd\056\uffdd\057\uffdd\001\002\000\006\017" +
    "\236\020\237\001\002\000\014\026\233\045\107\046\106" +
    "\047\110\050\105\001\002\000\010\017\uffdc\020\uffdc\056" +
    "\uffdc\001\002\000\020\005\071\051\103\052\074\053\076" +
    "\070\077\072\073\073\075\001\002\000\014\013\224\045" +
    "\107\046\106\047\110\050\105\001\002\000\036\016\050" +
    "\021\046\024\056\026\225\032\044\034\017\035\024\036" +
    "\011\037\023\070\051\074\043\075\061\076\014\077\013" +
    "\001\002\000\034\016\050\021\046\024\056\032\044\034" +
    "\017\035\024\036\011\037\023\070\051\074\043\075\061" +
    "\076\014\077\013\001\002\000\010\017\uffd8\020\uffd8\056" +
    "\uffd8\001\002\000\036\016\050\021\046\024\056\027\231" +
    "\032\044\034\017\035\024\036\011\037\023\070\051\074" +
    "\043\075\061\076\014\077\013\001\002\000\004\056\232" +
    "\001\002\000\010\017\uffda\020\uffda\056\uffda\001\002\000" +
    "\040\016\uffee\021\uffee\022\uffee\024\uffee\027\uffee\032\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\070\uffee\074\uffee\075" +
    "\uffee\076\uffee\077\uffee\001\002\000\034\016\050\021\046" +
    "\024\056\032\044\034\017\035\024\036\011\037\023\070" +
    "\051\074\043\075\061\076\014\077\013\001\002\000\036" +
    "\016\050\021\046\024\056\027\235\032\044\034\017\035" +
    "\024\036\011\037\023\070\051\074\043\075\061\076\014" +
    "\077\013\001\002\000\010\017\uffd9\020\uffd9\056\uffd9\001" +
    "\002\000\022\005\071\012\222\051\103\052\074\053\076" +
    "\070\077\072\073\073\075\001\002\000\036\016\050\021" +
    "\046\024\056\026\241\032\044\034\017\035\024\036\011" +
    "\037\023\070\051\074\043\075\061\076\014\077\013\001" +
    "\002\000\010\017\uffdb\020\uffdb\056\uffdb\001\002\000\034" +
    "\016\050\021\046\024\056\032\044\034\017\035\024\036" +
    "\011\037\023\070\051\074\043\075\061\076\014\077\013" +
    "\001\002\000\010\017\uffd5\020\uffd5\056\uffd5\001\002\000" +
    "\036\016\050\021\046\024\056\027\244\032\044\034\017" +
    "\035\024\036\011\037\023\070\051\074\043\075\061\076" +
    "\014\077\013\001\002\000\010\017\uffd6\020\uffd6\056\uffd6" +
    "\001\002\000\010\017\uffd7\020\uffd7\056\uffd7\001\002\000" +
    "\012\005\071\070\077\072\073\073\075\001\002\000\016" +
    "\004\122\005\115\006\126\007\117\010\121\013\250\001" +
    "\002\000\004\026\251\001\002\000\004\022\253\001\002" +
    "\000\006\022\260\027\257\001\002\000\012\005\071\070" +
    "\077\072\073\073\075\001\002\000\016\004\122\005\115" +
    "\006\126\007\117\010\121\060\255\001\002\000\034\016" +
    "\050\021\046\024\056\032\044\034\017\035\024\036\011" +
    "\037\023\070\051\074\043\075\061\076\014\077\013\001" +
    "\002\000\040\016\050\021\046\022\uffd2\024\056\027\uffd2" +
    "\032\044\034\017\035\024\036\011\037\023\070\051\074" +
    "\043\075\061\076\014\077\013\001\002\000\010\017\uffd4" +
    "\020\uffd4\056\uffd4\001\002\000\012\005\071\070\077\072" +
    "\073\073\075\001\002\000\016\004\122\005\115\006\126" +
    "\007\117\010\121\060\262\001\002\000\034\016\050\021" +
    "\046\024\056\032\044\034\017\035\024\036\011\037\023" +
    "\070\051\074\043\075\061\076\014\077\013\001\002\000" +
    "\040\016\050\021\046\022\uffd3\024\056\027\uffd3\032\044" +
    "\034\017\035\024\036\011\037\023\070\051\074\043\075" +
    "\061\076\014\077\013\001\002\000\010\017\uffe7\020\uffe7" +
    "\056\uffe7\001\002\000\010\017\uffce\020\uffce\056\uffce\001" +
    "\002\000\004\056\267\001\002\000\004\054\ufffe\001\002" +
    "\000\006\056\uffe2\057\uffe2\001\002\000\012\015\207\030" +
    "\210\056\uffe1\057\uffe1\001\002\000\006\056\uffe0\057\uffe0" +
    "\001\002\000\006\056\275\057\274\001\002\000\004\070" +
    "\271\001\002\000\014\017\uffe4\020\uffe4\027\uffe4\056\uffe4" +
    "\057\uffe4\001\002\000\006\056\uffe3\057\uffe3\001\002\000" +
    "\006\013\ufff2\057\ufff2\001\002\000\016\034\017\035\024" +
    "\036\011\037\023\076\014\077\013\001\002\000\004\027" +
    "\302\001\002\000\004\070\ufff3\001\002\000\034\016\050" +
    "\021\046\024\056\032\044\034\017\035\024\036\011\037" +
    "\023\070\051\074\043\075\061\076\014\077\013\001\002" +
    "\000\036\016\050\021\046\024\056\027\305\032\044\034" +
    "\017\035\024\036\011\037\023\070\051\074\043\075\061" +
    "\076\014\077\013\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\003\004\033\003\001\001\000\004\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\021\006\020\042\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\031\007\026\040\027\042\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\033\042\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\031\040\276\042\015\001" +
    "\001\000\002\001\001\000\040\005\040\010\041\011\054" +
    "\012\053\013\052\016\051\017\064\023\044\025\063\026" +
    "\062\027\061\030\057\031\056\035\046\042\015\001\001" +
    "\000\010\014\267\015\272\016\271\001\001\000\036\005" +
    "\040\011\227\012\053\013\052\016\051\017\064\023\044" +
    "\025\063\026\062\027\061\030\057\031\056\035\046\042" +
    "\015\001\001\000\014\020\217\032\264\034\101\041\071" +
    "\043\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\217\022\220" +
    "\032\216\034\101\041\071\043\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\040\011" +
    "\163\012\053\013\052\016\051\017\064\023\044\025\063" +
    "\026\062\027\061\030\057\031\056\035\046\037\175\042" +
    "\015\001\001\000\040\005\040\011\163\012\053\013\052" +
    "\016\051\017\064\023\044\025\063\026\062\027\061\030" +
    "\057\031\056\035\046\037\164\042\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\040\012\066\042\015" +
    "\001\001\000\002\001\001\000\012\020\077\034\101\041" +
    "\071\043\100\001\001\000\006\041\071\043\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\103\034\101\041\071\043\100\001\001\000\002\001\001" +
    "\000\010\034\113\041\071\043\100\001\001\000\010\034" +
    "\112\041\071\043\100\001\001\000\010\034\111\041\071" +
    "\043\100\001\001\000\010\034\110\041\071\043\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\071\043\141\001\001\000" +
    "\006\041\071\043\140\001\001\000\006\041\071\043\137" +
    "\001\001\000\006\041\071\043\136\001\001\000\006\041" +
    "\071\043\135\001\001\000\006\041\071\043\134\001\001" +
    "\000\006\041\071\043\133\001\001\000\006\041\071\043" +
    "\132\001\001\000\006\041\071\043\131\001\001\000\006" +
    "\041\071\043\130\001\001\000\006\041\071\043\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\071\043\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\071\043\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\071\043\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\040\011\163\012" +
    "\053\013\052\016\051\017\064\023\044\025\063\026\062" +
    "\027\061\030\057\031\056\035\046\036\166\037\167\042" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\040\011\163\012\053\013\052\016" +
    "\051\017\064\023\044\025\063\026\062\027\061\030\057" +
    "\031\056\035\046\037\171\042\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\040\011\163\012\053\013" +
    "\052\016\051\017\064\023\044\025\063\026\062\027\061" +
    "\030\057\031\056\035\046\036\176\037\167\042\015\001" +
    "\001\000\002\001\001\000\040\005\040\011\163\012\053" +
    "\013\052\016\051\017\064\023\044\025\063\026\062\027" +
    "\061\030\057\031\056\035\046\037\171\042\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\071\043\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\071" +
    "\043\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\222\034\101\041\071\043" +
    "\100\001\001\000\002\001\001\000\036\005\040\011\225" +
    "\012\053\013\052\016\051\017\064\023\044\025\063\026" +
    "\062\027\061\030\057\031\056\035\046\042\015\001\001" +
    "\000\040\005\040\010\226\011\054\012\053\013\052\016" +
    "\051\017\064\023\044\025\063\026\062\027\061\030\057" +
    "\031\056\035\046\042\015\001\001\000\002\001\001\000" +
    "\036\005\040\011\227\012\053\013\052\016\051\017\064" +
    "\023\044\025\063\026\062\027\061\030\057\031\056\035" +
    "\046\042\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\040\010\233\011\054\012" +
    "\053\013\052\016\051\017\064\023\044\025\063\026\062" +
    "\027\061\030\057\031\056\035\046\042\015\001\001\000" +
    "\036\005\040\011\227\012\053\013\052\016\051\017\064" +
    "\023\044\025\063\026\062\027\061\030\057\031\056\035" +
    "\046\042\015\001\001\000\002\001\001\000\016\020\217" +
    "\022\244\032\216\034\101\041\071\043\100\001\001\000" +
    "\036\005\040\011\241\012\053\013\052\016\051\017\064" +
    "\023\044\025\063\026\062\027\061\030\057\031\056\035" +
    "\046\042\015\001\001\000\002\001\001\000\040\005\040" +
    "\010\242\011\054\012\053\013\052\016\051\017\064\023" +
    "\044\025\063\026\062\027\061\030\057\031\056\035\046" +
    "\042\015\001\001\000\002\001\001\000\036\005\040\011" +
    "\227\012\053\013\052\016\051\017\064\023\044\025\063" +
    "\026\062\027\061\030\057\031\056\035\046\042\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\071" +
    "\043\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\251\001\001\000\002\001\001\000\006\041\071" +
    "\043\253\001\001\000\002\001\001\000\040\005\040\010" +
    "\255\011\054\012\053\013\052\016\051\017\064\023\044" +
    "\025\063\026\062\027\061\030\057\031\056\035\046\042" +
    "\015\001\001\000\036\005\040\011\227\012\053\013\052" +
    "\016\051\017\064\023\044\025\063\026\062\027\061\030" +
    "\057\031\056\035\046\042\015\001\001\000\002\001\001" +
    "\000\006\041\071\043\260\001\001\000\002\001\001\000" +
    "\040\005\040\010\262\011\054\012\053\013\052\016\051" +
    "\017\064\023\044\025\063\026\062\027\061\030\057\031" +
    "\056\035\046\042\015\001\001\000\036\005\040\011\227" +
    "\012\053\013\052\016\051\017\064\023\044\025\063\026" +
    "\062\027\061\030\057\031\056\035\046\042\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\275\016\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\040\012\300\042\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\040\010\303\011\054" +
    "\012\053\013\052\016\051\017\064\023\044\025\063\026" +
    "\062\027\061\030\057\031\056\035\046\042\015\001\001" +
    "\000\036\005\040\011\227\012\053\013\052\016\051\017" +
    "\064\023\044\025\063\026\062\027\061\030\057\031\056" +
    "\035\046\042\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 scanner.init();              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // atributo ::= ID LCORCHETE expr RCORCHETE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*atributo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // atributo ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*atributo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // atributo ::= atributo PUNTO ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*atributo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= atributo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= TKFLOAT 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTFlotante(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= TKENTERO 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTEntero(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTResUnario(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr MOD expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTMod(e1,e2);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr DIVIDE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTDiv(e1,e2);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr TIMES expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTMult(e1,e2);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTResta(e1,e2);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTSuma(e1,e2);
              CUP$parser$result = new java_cup.runtime.Symbol(33/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignacionRara ::= ID MENOSMENOS 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTMENOSMENOS(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*asignacionRara*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignacionRara ::= ID MENOSIGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTMENOSIGUAL(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*asignacionRara*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacionRara ::= ID MASIGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTMASIGUAL(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*asignacionRara*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacionRara ::= ID MASMAS 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTMASMAS(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*asignacionRara*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // booleano ::= FALSE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTExpBool(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // booleano ::= TRUE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTExpBool(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // booleano ::= expr MENORIGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTGreat(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // booleano ::= expr MAYORIGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTLess(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // booleano ::= expr DIFERENTE expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTDif(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // booleano ::= expr IGUALIGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTEqual(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // booleano ::= expr MENOR expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTGeq(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // booleano ::= expr MAYOR expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTLeq(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(26/*booleano*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // guardia ::= booleano 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*guardia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // guardia ::= NEGACION guardia 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTNeg(val[1]);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*guardia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // guardia ::= guardia O booleano 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTDisy(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*guardia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // guardia ::= guardia I booleano 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTConj(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*guardia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // guardia ::= guardia OO booleano 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTDisyC(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*guardia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // guardia ::= guardia II booleano 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTConjC(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*guardia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instSRS ::= BREAK 
            {
              Object RESULT = null;
		  result = new ASTUnario(BREAK);
              CUP$parser$result = new java_cup.runtime.Symbol(29/*instSRS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instSRS ::= instS 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(29/*instSRS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instSR ::= instSRS PYC 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  result = new ASTMultiple(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(28/*instSR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instSR ::= instSR instSRS PYC 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 v1.insertaHijos(v2);
              CUP$parser$result = new java_cup.runtime.Symbol(28/*instSR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // repeat2 ::= FOREACH LPAREN ID IN ID RPAREN 
            {
              Object RESULT = null;
		 result = new ASTForEachHeader(v1, v2, v3);
              CUP$parser$result = new java_cup.runtime.Symbol(23/*repeat2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rep3 ::= repeat2 instSRS 
            {
              Object RESULT = null;
		  result = new ASTForEach(v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(21/*rep3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rep3 ::= repeat2 LLLAVE instSR RLLAVE 
            {
              Object RESULT = null;
		  result = new ASTForEach(v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(21/*rep3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rep2 ::= repeat1 instSRS 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTFor(v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(20/*rep2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rep2 ::= repeat1 LLLAVE instSR RLLAVE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  result = new ASTFor(v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(20/*rep2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // repeat1 ::= FOR LPAREN declaracion COMA guardia COMA asignacionRara RPAREN 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTForHeader(v1, v2, v3);
              CUP$parser$result = new java_cup.runtime.Symbol(22/*repeat1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rep1 ::= WHILE comun 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTWhile(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(19/*rep1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // repeticion ::= rep3 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*repeticion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // repeticion ::= rep2 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*repeticion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // repeticion ::= rep1 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*repeticion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // case ::= CASE expr DOSPUNTOS inst 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTMultiple(new ASTBinario(v1,v2));
              CUP$parser$result = new java_cup.runtime.Symbol(18/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case ::= case CASE expr DOSPUNTOS inst 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v1.insertaHijo(new ASTBinario(v2,v3));
              CUP$parser$result = new java_cup.runtime.Symbol(18/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // switche ::= SWITCH LPAREN expr RPAREN LLLAVE case RLLAVE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTSwitche(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(17/*switche*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseif ::= ELSE instS 
            {
              Object RESULT = null;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(15/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elseif ::= ELSE LLLAVE inst RLLAVE 
            {
              Object RESULT = null;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(15/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elseif ::= ELSEIF instruccionIf 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(15/*elseif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comun ::= LPAREN guardia RPAREN instS 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTIf(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(24/*comun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comun ::= guardia LLLAVE inst RLLAVE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTIf(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(24/*comun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comun ::= LPAREN guardia RPAREN LLLAVE inst RLLAVE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTIf(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(24/*comun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccionIf ::= comun elseif 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new Binario(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(16/*instruccionIf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seleccion ::= IF instruccionIf 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(9/*seleccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= ID IGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTAsig(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(12/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= ID IGUAL TKSTRING 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTAsig(v1, v2);
              CUP$parser$result = new java_cup.runtime.Symbol(12/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion ::= ID LCORCHETE TKENTERO RCORCHETE IGUAL expr 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTAsigArray(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(12/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // extra ::= asignacion 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // extra ::= ID 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*extra*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec ::= extra 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  result = new ASTMultiple(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec ::= dec COMA extra 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  v1.insertaHijo(v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= tipo dec PYC 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		result = new ASTBinario(v1,v2) ;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instS ::= asignacionRara 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instS ::= RETURN 
            {
              Object RESULT = null;
		result = new ASTReturn(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instS ::= RETURN ID 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTReturnUnario(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instS ::= asignacion 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instS ::= repeticion 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instS ::= switche 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instS ::= seleccion 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instS ::= declaracion 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*instS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inst ::= instS PYC 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTMultiple(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inst ::= inst instS PYC 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 v1.insertaHijo(v2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // referencia ::= REF tipo ID 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTTernario(REF,v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(30/*referencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // referencia ::= tipo ID 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTBinario(v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(30/*referencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= referencia 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTMultiple(v1) ;
              CUP$parser$result = new java_cup.runtime.Symbol(5/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= param COMA referencia 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v1.insertaHijos(v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct ::= STRUCT LLLAVE declaracion RLLAVE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(32/*struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= struct 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= FLOAT 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTFloat(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= BOOL 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTBool(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= CHAR 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTChar(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= STRING 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTString(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= ENTERO 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTEntero(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipoP ::= ID 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*tipoP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipoP ::= VOID 
            {
              Object RESULT = null;
		 result = new ASTUnario(VOID);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*tipoP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipoP ::= tipo 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*tipoP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procedimiento ::= 
            {
              Object RESULT = null;
		 result = new ASTMultiple();
              CUP$parser$result = new java_cup.runtime.Symbol(25/*procedimiento*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedimiento ::= procedimiento SUB tipoP ID LPAREN param RPAREN LLLAVE inst RLLAVE PYC 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 v1.insertaHijo(new ASTProc(v1,v2,v3));
              CUP$parser$result = new java_cup.runtime.Symbol(25/*procedimiento*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= SUB MAIN LLLAVE inst RLLAVE 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 result = new ASTUnario(v1);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= procedimiento s 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ASTBinario ast = new ASTBinario(v1,v2);
              CUP$parser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

